# 1. Specify Docker as a dependency
# 2. Buld test version of the React project
# 3. Run tests (only React project has tests)
# 4. Build prod versions of all projects
# 5. Push all to Docker Hub
# 6. Tell Elastic Beanstalk to update

sudo: required

services:
  - docker

before_install:
  # Build the dev image of the react client
  - docker build -t rthuffman/client-test -f ./client/Dockerfile.dev ./client

script:
  # Run the tests in the react client image
  - docker run -e CI=true rthuffman/client-test npm test

after_success:
  # Build production images
  - docker build -t rthuffman/multicontainer-client ./client
  - docker build -t rthuffman/multicontainer-nginx ./nginx
  - docker build -t rthuffman/multicontainer-server ./server
  - docker build -t rthuffman/multicontainer-worker ./worker

  # Log in to Docker Hub CLI
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin

  # Push to Docker Hub
  - docker push rthuffman/multicontainer-client
  - docker push rthuffman/multicontainer-nginx
  - docker push rthuffman/multicontainer-server
  - docker push rthuffman/multicontainer-worker

deploy:
  provider: elasticbeanstalk
  region: "us-west-2"
  app: "Multicontainer"
  env: "Multicontainer-env"
  bucket_name: "elasticbeanstalk-us-west-2-891901667286"
  bucket_path: "multicontainer-docker"
  on:
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
